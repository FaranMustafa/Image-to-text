{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","target","files","uploads","key","hasOwnProperty","upload","push","URL","createObjectURL","setState","generateText","state","i","length","Tesseract","recognize","logger","m","console","log","then","text","data","loading","documents","catch","err","copyCodeToClipboard","textArea","select","document","execCommand","className","type","id","onChange","this","multiple","map","value","index","src","width","Button","onClick","variant","color","style","display","justifyContent","marginTop","CircularProgress","margin","background","padding","borderRadius","minHeight","ref","textarea","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+TA6JeA,E,kDAtJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,SAACC,GACd,GAAIA,EAAMC,OAAOC,MAAM,GAAI,CACzB,IAAIC,EAAU,GACd,IAAK,IAAIC,KAAOJ,EAAMC,OAAOC,MAC3B,GAAKF,EAAMC,OAAOC,MAAMG,eAAeD,GAAvC,CACA,IAAIE,EAASN,EAAMC,OAAOC,MAAME,GAChCD,EAAQI,KAAKC,IAAIC,gBAAgBH,IAEnC,EAAKI,SAAS,CACZP,QAASA,SAGX,EAAKO,SAAS,CACZP,QAAS,MArBI,EA0BnBQ,aAAe,WAEb,IADA,IAAIR,EAAU,EAAKS,MAAMT,QAChBU,EAAI,EAAGA,EAAIV,EAAQW,OAAQD,IAClCE,IAAUC,UAAUb,EAAQU,GAAI,MAAO,CAAEI,OAAQ,SAACC,GAAD,OAAOC,QAAQC,IAAIF,MACjEG,MAAK,YAAyB,IAAdC,EAAa,EAArBC,KAAQD,KACf,EAAKZ,SAAS,CAAEc,SAAS,EAAOC,UAAWH,OAG5CI,OAAM,SAACC,GACNR,QAAQC,IAAIO,OAnCD,EAoEnBC,oBAAsB,WACT,EAAKC,SACbC,SACHC,SAASC,YAAY,SArErB,EAAKpB,MAAQ,CACXT,QAAS,GACTsB,WAAW,EACXD,SAAS,GALM,E,qDAyET,IAAD,OACP,OACE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,UAChB,8CAGF,6BAASA,UAAU,QACjB,2BAAOA,UAAU,yBAAjB,iCAEE,2BACEC,KAAK,OACLC,GAAG,eACHC,SAAUC,KAAKtC,aACfuC,UAAQ,KAIZ,6BACGD,KAAKzB,MAAMT,QAAQoC,KAAI,SAACC,EAAOC,GAC9B,OAAO,yBAAKrC,IAAKqC,EAAOC,IAAKF,EAAOG,MAAM,cAI9C,kBAACC,EAAA,EAAD,CACEC,QAAS,WACP,EAAKnC,SAAS,CAAEc,SAAS,IACzB,EAAKb,gBAEPmC,QAAQ,YACRC,MAAM,UACNC,MAAO,CAAEL,MAAO,SAPlB,aAaDN,KAAKzB,MAAMY,SACV,yBACEwB,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,UAAW,SAGb,kBAACC,EAAA,EAAD,CAAkBL,MAAM,eAG3BV,KAAKzB,MAAMa,WACV,yBACEuB,MAAO,CACLK,OAAQ,YACRC,WAAY,QACZC,QAAS,OACTC,aAAc,SAGhB,kBAACZ,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKjB,uBACpBkB,QAAQ,YACRC,MAAM,WAHR,qBAQA,8BACEC,MAAO,CAAEL,MAAO,OAAQc,UAAW,OAAQN,UAAW,QACtDO,IAAK,SAACC,GAAD,OAAe,EAAK9B,SAAW8B,GACpCnB,MAAOH,KAAKzB,MAAMa,aAGrB,S,GAjJOmC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.fdc0cc64.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Tesseract from \"tesseract.js\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploads: [],\n      documents: false,\n      loading: false,\n    };\n  }\n  handleChange = (event) => {\n    if (event.target.files[0]) {\n      var uploads = [];\n      for (var key in event.target.files) {\n        if (!event.target.files.hasOwnProperty(key)) continue;\n        let upload = event.target.files[key];\n        uploads.push(URL.createObjectURL(upload));\n      }\n      this.setState({\n        uploads: uploads,\n      });\n    } else {\n      this.setState({\n        uploads: [],\n      });\n    }\n  };\n\n  generateText = () => {\n    let uploads = this.state.uploads;\n    for (var i = 0; i < uploads.length; i++) {\n      Tesseract.recognize(uploads[i], \"eng\", { logger: (m) => console.log(m) })\n        .then(({ data: { text } }) => {\n          this.setState({ loading: false, documents: text });\n          //    console.log(text, 'result');\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n    //   for(var i = 0; i < uploads.length; i++) {\n    //     Tesseract.recognize(uploads[i], {\n    //       lang: 'eng'\n    //     })\n    //     .catch(err => {\n    //       console.error(err)\n    //     })\n    //     .then(result => {\n    //       // Get Confidence score\n    // //      let confidence = result.confidence\n\n    //       // Get full output\n    //       let text = result.text\n\n    //       // Get codes\n    //       let pattern = /\\b\\w{10,10}\\b/g\n    //       let patterns = result.text.match(pattern);\n\n    //       // Update state\n    //       this.setState({\n    //         patterns: this.state.patterns.concat(patterns),\n    //         documents: this.state.documents.concat({\n    //           pattern: patterns,\n    //           text: text,\n    // //          confidence: confidence\n    //         })\n    //     })\n    //   })\n    // }\n  };\n  copyCodeToClipboard = () => {\n    const el = this.textArea;\n    el.select();\n    document.execCommand(\"copy\");\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"header\">\n          <h1>Image to Text</h1>\n        </header>\n        {/* File uploader */}\n        <section className=\"hero\">\n          <label className=\"fileUploaderContainer\">\n            Click here to upload documents\n            <input\n              type=\"file\"\n              id=\"fileUploader\"\n              onChange={this.handleChange}\n              multiple\n            />\n          </label>\n\n          <div>\n            {this.state.uploads.map((value, index) => {\n              return <img key={index} src={value} width=\"100px\" />;\n            })}\n          </div>\n\n          <Button\n            onClick={() => {\n              this.setState({ loading: true });\n              this.generateText();\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ width: \"100%\" }}\n          >\n            Generate\n          </Button>\n        </section>\n        {/* Results */}\n        {this.state.loading && (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              marginTop: \"2rem\",\n            }}\n          >\n            <CircularProgress color=\"secondary\" />\n          </div>\n        )}\n        {this.state.documents && (\n          <div\n            style={{\n              margin: \"3rem 15vw\",\n              background: \"white\",\n              padding: \"1rem\",\n              borderRadius: \"12px\",\n            }}\n          >\n            <Button\n              onClick={() => this.copyCodeToClipboard()}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Copy to Clipboard\n            </Button>\n\n            <textarea\n              style={{ width: \"100%\", minHeight: \"50vh\", marginTop: \"1rem\" }}\n              ref={(textarea) => (this.textArea = textarea)}\n              value={this.state.documents}\n            />\n          </div>\n        )}{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}